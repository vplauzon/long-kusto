let Days = query:
    """
        range i from 1 to 90 step 1
        | project Day = bin(now(),1d)-i*1d
    """;

//  Ensure table exists
command:
    """
        .create-merge table Telemetry(Source:string, Destination:string, Timestamp:datetime)
    """;

//  Generate data for each day
foreach Day in Days with (concurrency=10)
{
    //  Here the underlying query is getting exported to storage and then queued for ingestion
    append in Telemetry:
        query:
            """
                print Timestamp=Day
                | extend SourceRangeIds=range(1, 5000, 1)
                | extend DestinationRangeIds=SourceRangeIds
                | mv-expand SourceRangeIds to typeof(string)
                | mv-expand DestinationRangeIds to typeof(string)
                | extend Source=strcat("s-", SourceRangeIds)
                | extend Destination=strcat("d-", DestinationRangeIds)
                | project Source, Destination, Timestamp
            """;
    //  How could we aggregate all ingestion operation IDs to wait for them?
    //  append could simply return an operation ID and only if it is used somewhere is it really requested?
    //  But that wouldn't work in the context of multiple clusters scenario
}
